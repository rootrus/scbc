package org.bouncycastle.crypto.examples;

import java.io.PrintStream;
import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.CryptoException;
import org.bouncycastle.crypto.agreement.jpake.JPAKEParticipant;
import org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;
import org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload;
import org.bouncycastle.crypto.digests.SHA256Digest;

public class JPAKEExample {
    private static BigInteger deriveSessionKey(BigInteger bigInteger) {
        SHA256Digest sHA256Digest = new SHA256Digest();
        byte[] byteArray = bigInteger.toByteArray();
        byte[] bArr = new byte[sHA256Digest.getDigestSize()];
        sHA256Digest.update(byteArray, 0, byteArray.length);
        sHA256Digest.doFinal(bArr, 0);
        return new BigInteger(bArr);
    }

    public static void main(String[] strArr) throws CryptoException {
        JPAKEPrimeOrderGroup jPAKEPrimeOrderGroup = JPAKEPrimeOrderGroups.NIST_3072;
        BigInteger p = jPAKEPrimeOrderGroup.getP();
        BigInteger q = jPAKEPrimeOrderGroup.getQ();
        BigInteger g = jPAKEPrimeOrderGroup.getG();
        System.out.println("********* Initialization **********");
        System.out.println("Public parameters for the cyclic group:");
        PrintStream printStream = System.out;
        StringBuilder sb = new StringBuilder();
        sb.append("p (");
        sb.append(p.bitLength());
        sb.append(" bits): ");
        sb.append(p.toString(16));
        printStream.println(sb.toString());
        PrintStream printStream2 = System.out;
        StringBuilder sb2 = new StringBuilder();
        sb2.append("q (");
        sb2.append(q.bitLength());
        sb2.append(" bits): ");
        sb2.append(q.toString(16));
        printStream2.println(sb2.toString());
        PrintStream printStream3 = System.out;
        StringBuilder sb3 = new StringBuilder();
        sb3.append("g (");
        sb3.append(p.bitLength());
        sb3.append(" bits): ");
        sb3.append(g.toString(16));
        printStream3.println(sb3.toString());
        PrintStream printStream4 = System.out;
        StringBuilder sb4 = new StringBuilder();
        sb4.append("p mod q = ");
        sb4.append(p.mod(q).toString(16));
        printStream4.println(sb4.toString());
        PrintStream printStream5 = System.out;
        StringBuilder sb5 = new StringBuilder();
        sb5.append("g^{q} mod p = ");
        sb5.append(g.modPow(q, p).toString(16));
        printStream5.println(sb5.toString());
        System.out.println("");
        PrintStream printStream6 = System.out;
        StringBuilder sb6 = new StringBuilder();
        sb6.append("(Secret passwords used by Alice and Bob: \"");
        sb6.append("password");
        sb6.append("\" and \"");
        sb6.append("password");
        sb6.append("\")\n");
        printStream6.println(sb6.toString());
        SHA256Digest sHA256Digest = new SHA256Digest();
        JPAKEPrimeOrderGroup jPAKEPrimeOrderGroup2 = jPAKEPrimeOrderGroup;
        SHA256Digest sHA256Digest2 = sHA256Digest;
        SecureRandom secureRandom = new SecureRandom();
        JPAKEParticipant jPAKEParticipant = new JPAKEParticipant("alice", "password".toCharArray(), jPAKEPrimeOrderGroup2, sHA256Digest2, secureRandom);
        JPAKEParticipant jPAKEParticipant2 = new JPAKEParticipant("bob", "password".toCharArray(), jPAKEPrimeOrderGroup2, sHA256Digest2, secureRandom);
        JPAKERound1Payload createRound1PayloadToSend = jPAKEParticipant.createRound1PayloadToSend();
        JPAKERound1Payload createRound1PayloadToSend2 = jPAKEParticipant2.createRound1PayloadToSend();
        System.out.println("************ Round 1 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream7 = System.out;
        StringBuilder sb7 = new StringBuilder();
        sb7.append("g^{x1}=");
        sb7.append(createRound1PayloadToSend.getGx1().toString(16));
        printStream7.println(sb7.toString());
        PrintStream printStream8 = System.out;
        StringBuilder sb8 = new StringBuilder();
        sb8.append("g^{x2}=");
        sb8.append(createRound1PayloadToSend.getGx2().toString(16));
        printStream8.println(sb8.toString());
        PrintStream printStream9 = System.out;
        StringBuilder sb9 = new StringBuilder();
        sb9.append("KP{x1}={");
        sb9.append(createRound1PayloadToSend.getKnowledgeProofForX1()[0].toString(16));
        sb9.append("};{");
        sb9.append(createRound1PayloadToSend.getKnowledgeProofForX1()[1].toString(16));
        sb9.append("}");
        printStream9.println(sb9.toString());
        PrintStream printStream10 = System.out;
        StringBuilder sb10 = new StringBuilder();
        sb10.append("KP{x2}={");
        sb10.append(createRound1PayloadToSend.getKnowledgeProofForX2()[0].toString(16));
        sb10.append("};{");
        sb10.append(createRound1PayloadToSend.getKnowledgeProofForX2()[1].toString(16));
        sb10.append("}");
        printStream10.println(sb10.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        PrintStream printStream11 = System.out;
        StringBuilder sb11 = new StringBuilder();
        sb11.append("g^{x3}=");
        sb11.append(createRound1PayloadToSend2.getGx1().toString(16));
        printStream11.println(sb11.toString());
        PrintStream printStream12 = System.out;
        StringBuilder sb12 = new StringBuilder();
        sb12.append("g^{x4}=");
        sb12.append(createRound1PayloadToSend2.getGx2().toString(16));
        printStream12.println(sb12.toString());
        PrintStream printStream13 = System.out;
        StringBuilder sb13 = new StringBuilder();
        sb13.append("KP{x3}={");
        sb13.append(createRound1PayloadToSend2.getKnowledgeProofForX1()[0].toString(16));
        sb13.append("};{");
        sb13.append(createRound1PayloadToSend2.getKnowledgeProofForX1()[1].toString(16));
        sb13.append("}");
        printStream13.println(sb13.toString());
        PrintStream printStream14 = System.out;
        StringBuilder sb14 = new StringBuilder();
        sb14.append("KP{x4}={");
        sb14.append(createRound1PayloadToSend2.getKnowledgeProofForX2()[0].toString(16));
        sb14.append("};{");
        sb14.append(createRound1PayloadToSend2.getKnowledgeProofForX2()[1].toString(16));
        sb14.append("}");
        printStream14.println(sb14.toString());
        System.out.println("");
        jPAKEParticipant.validateRound1PayloadReceived(createRound1PayloadToSend2);
        System.out.println("Alice checks g^{x4}!=1: OK");
        System.out.println("Alice checks KP{x3}: OK");
        System.out.println("Alice checks KP{x4}: OK");
        System.out.println("");
        jPAKEParticipant2.validateRound1PayloadReceived(createRound1PayloadToSend);
        System.out.println("Bob checks g^{x2}!=1: OK");
        System.out.println("Bob checks KP{x1},: OK");
        System.out.println("Bob checks KP{x2},: OK");
        System.out.println("");
        JPAKERound2Payload createRound2PayloadToSend = jPAKEParticipant.createRound2PayloadToSend();
        JPAKERound2Payload createRound2PayloadToSend2 = jPAKEParticipant2.createRound2PayloadToSend();
        System.out.println("************ Round 2 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream15 = System.out;
        StringBuilder sb15 = new StringBuilder();
        sb15.append("A=");
        sb15.append(createRound2PayloadToSend.getA().toString(16));
        printStream15.println(sb15.toString());
        PrintStream printStream16 = System.out;
        StringBuilder sb16 = new StringBuilder();
        sb16.append("KP{x2*s}={");
        sb16.append(createRound2PayloadToSend.getKnowledgeProofForX2s()[0].toString(16));
        sb16.append("},{");
        sb16.append(createRound2PayloadToSend.getKnowledgeProofForX2s()[1].toString(16));
        sb16.append("}");
        printStream16.println(sb16.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice");
        PrintStream printStream17 = System.out;
        StringBuilder sb17 = new StringBuilder();
        sb17.append("B=");
        sb17.append(createRound2PayloadToSend2.getA().toString(16));
        printStream17.println(sb17.toString());
        PrintStream printStream18 = System.out;
        StringBuilder sb18 = new StringBuilder();
        sb18.append("KP{x4*s}={");
        sb18.append(createRound2PayloadToSend2.getKnowledgeProofForX2s()[0].toString(16));
        sb18.append("},{");
        sb18.append(createRound2PayloadToSend2.getKnowledgeProofForX2s()[1].toString(16));
        sb18.append("}");
        printStream18.println(sb18.toString());
        System.out.println("");
        jPAKEParticipant.validateRound2PayloadReceived(createRound2PayloadToSend2);
        System.out.println("Alice checks KP{x4*s}: OK\n");
        jPAKEParticipant2.validateRound2PayloadReceived(createRound2PayloadToSend);
        System.out.println("Bob checks KP{x2*s}: OK\n");
        BigInteger calculateKeyingMaterial = jPAKEParticipant.calculateKeyingMaterial();
        BigInteger calculateKeyingMaterial2 = jPAKEParticipant2.calculateKeyingMaterial();
        System.out.println("********* After round 2 ***********");
        PrintStream printStream19 = System.out;
        StringBuilder sb19 = new StringBuilder();
        sb19.append("Alice computes key material \t K=");
        sb19.append(calculateKeyingMaterial.toString(16));
        printStream19.println(sb19.toString());
        PrintStream printStream20 = System.out;
        StringBuilder sb20 = new StringBuilder();
        sb20.append("Bob computes key material \t K=");
        sb20.append(calculateKeyingMaterial2.toString(16));
        printStream20.println(sb20.toString());
        System.out.println();
        deriveSessionKey(calculateKeyingMaterial);
        deriveSessionKey(calculateKeyingMaterial2);
        JPAKERound3Payload createRound3PayloadToSend = jPAKEParticipant.createRound3PayloadToSend(calculateKeyingMaterial);
        JPAKERound3Payload createRound3PayloadToSend2 = jPAKEParticipant2.createRound3PayloadToSend(calculateKeyingMaterial2);
        System.out.println("************ Round 3 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream21 = System.out;
        StringBuilder sb21 = new StringBuilder();
        sb21.append("MacTag=");
        sb21.append(createRound3PayloadToSend.getMacTag().toString(16));
        printStream21.println(sb21.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        PrintStream printStream22 = System.out;
        StringBuilder sb22 = new StringBuilder();
        sb22.append("MacTag=");
        sb22.append(createRound3PayloadToSend2.getMacTag().toString(16));
        printStream22.println(sb22.toString());
        System.out.println("");
        jPAKEParticipant.validateRound3PayloadReceived(createRound3PayloadToSend2, calculateKeyingMaterial);
        System.out.println("Alice checks MacTag: OK\n");
        jPAKEParticipant2.validateRound3PayloadReceived(createRound3PayloadToSend, calculateKeyingMaterial2);
        System.out.println("Bob checks MacTag: OK\n");
        System.out.println();
        System.out.println("MacTags validated, therefore the keying material matches.");
    }
}
